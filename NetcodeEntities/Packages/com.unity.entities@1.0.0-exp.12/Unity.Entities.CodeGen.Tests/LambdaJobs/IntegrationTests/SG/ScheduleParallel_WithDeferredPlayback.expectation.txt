using System;
using System.Runtime.CompilerServices;
using Unity.Burst;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;

[CompilerGenerated]
public class ScheduleParallel_WithDeferredPlayback : SystemBase
{
	[NoAlias]
	[BurstCompile(FloatMode = FloatMode.Default, FloatPrecision = FloatPrecision.Standard, CompileSynchronously = false)]
	private struct ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Job : IJobEntityBatch
	{
		public Unity.Mathematics.Random random;

		[ReadOnly]
		public EntityTypeHandle __entityTypeHandle;

		public EntityCommandBuffer.ParallelWriter __ecbParallelWriter;

		[ReadOnly]
		public ComponentTypeHandle<WidgetSpawner> __spawnerTypeHandle;

		[ReadOnly]
		public ComponentTypeHandle<Translation> __translationTypeHandle;

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private void OriginalLambdaBody(Entity entity, [NoAlias] in WidgetSpawner spawner, [NoAlias] in Translation translation, int __sortKey)
		{
			Entity e = __ecbParallelWriter.Instantiate(__sortKey, spawner.WidgetPrefabEntity);
			__ecbParallelWriter.AddComponent(__sortKey, e, new Health
			{
				Score = random.NextFloat()
			});
			__ecbParallelWriter.SetComponent(__sortKey, e, new Translation
			{
				Value = translation.Value - random.NextFloat3()
			});
			__ecbParallelWriter.RemoveComponent<Health>(__sortKey, e);
			__ecbParallelWriter.DestroyEntity(__sortKey, e);
		}

		public void Execute(ArchetypeChunk chunk, int batchIndex)
		{
			IntPtr nativeArrayPtr = InternalCompilerInterface.UnsafeGetChunkEntityArrayIntPtr(chunk, __entityTypeHandle);
			IntPtr nativeArrayPtr2 = InternalCompilerInterface.UnsafeGetChunkNativeArrayReadOnlyIntPtr(chunk, __spawnerTypeHandle);
			IntPtr nativeArrayPtr3 = InternalCompilerInterface.UnsafeGetChunkNativeArrayReadOnlyIntPtr(chunk, __translationTypeHandle);
			int count = chunk.Count;
			for (int i = 0; i != count; i++)
			{
				OriginalLambdaBody(InternalCompilerInterface.UnsafeGetCopyOfNativeArrayPtrElement<Entity>(nativeArrayPtr, i), in InternalCompilerInterface.UnsafeGetRefToNativeArrayPtrElement<WidgetSpawner>(nativeArrayPtr2, i), in InternalCompilerInterface.UnsafeGetRefToNativeArrayPtrElement<Translation>(nativeArrayPtr3, i), batchIndex);
			}
		}
	}

	private EntityQuery ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Query;

	private ComponentTypeHandle<WidgetSpawner> __WidgetSpawner_RO_ComponentTypeHandle;

	private ComponentTypeHandle<Translation> __Translation_RO_ComponentTypeHandle;

	private EndSimulationEntityCommandBufferSystem __Unity_Entities_EndSimulationEntityCommandBufferSystem;

	protected override void OnUpdate()
	{
		Unity.Mathematics.Random random = default(Unity.Mathematics.Random);
		base.Entities.WithDeferredPlaybackSystem<EndSimulationEntityCommandBufferSystem>().ForEach(delegate(Entity entity, EntityCommandBuffer buffer, in WidgetSpawner spawner, in Translation translation)
		{
			Entity e = buffer.Instantiate(spawner.WidgetPrefabEntity);
			buffer.AddComponent(e, new Health
			{
				Score = random.NextFloat()
			});
			buffer.SetComponent(e, new Translation
			{
				Value = translation.Value - random.NextFloat3()
			});
			buffer.RemoveComponent<Health>(e);
			buffer.DestroyEntity(e);
		}).ScheduleParallel();
	}

	[DOTSCompilerPatchedMethod("OnUpdate")]
	protected void __OnUpdate_4535BF70()
	{
		ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Execute(default(Unity.Mathematics.Random));
	}

	private void ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Execute(Unity.Mathematics.Random random)
	{
		__WidgetSpawner_RO_ComponentTypeHandle.Update(ref base.CheckedStateRef);
		__Translation_RO_ComponentTypeHandle.Update(ref base.CheckedStateRef);
		ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Job scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job = default(ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Job);
		scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job.random = random;
		scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job.__entityTypeHandle = GetEntityTypeHandle();
		scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job.__ecbParallelWriter = __Unity_Entities_EndSimulationEntityCommandBufferSystem.CreateCommandBuffer().AsParallelWriter();
		scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job.__spawnerTypeHandle = __WidgetSpawner_RO_ComponentTypeHandle;
		scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job.__translationTypeHandle = __Translation_RO_ComponentTypeHandle;
		ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Job jobData = scheduleParallel_WithDeferredPlayback_LambdaJob_0_Job;
		base.Dependency = JobEntityBatchExtensions.ScheduleParallel(jobData, ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Query, base.Dependency);
		__Unity_Entities_EndSimulationEntityCommandBufferSystem.AddJobHandleForProducer(base.Dependency);
	}

	protected override void OnCreateForCompiler()
	{
		base.OnCreateForCompiler();
		ScheduleParallel_WithDeferredPlayback_LambdaJob_0_Query = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[2]
			{
				ComponentType.ReadOnly<WidgetSpawner>(),
				ComponentType.ReadOnly<Translation>()
			},
			Any = new ComponentType[0],
			None = new ComponentType[0],
			Options = EntityQueryOptions.Default
		});
		__WidgetSpawner_RO_ComponentTypeHandle = GetComponentTypeHandle<WidgetSpawner>(isReadOnly: true);
		__Translation_RO_ComponentTypeHandle = GetComponentTypeHandle<Translation>(isReadOnly: true);
		__Unity_Entities_EndSimulationEntityCommandBufferSystem = base.World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();
	}
}
